services:
  api:
    container_name: 'api'
    tty: true
    build:
      context: .
      dockerfile: ./app/Dockerfile
    ports:
        - '8000:8000'
    env_file:
        - .env
    volumes:
        - './app:/app'
        - '.env:/app/.env'
    working_dir: /app
    command: "fastapi dev main.py --host 0.0.0.0"
    depends_on:
      - 'database'

  php:
    build: './sapi/docker/php'
    ports: ['9000:9000']
    volumes: ['./sapi/app/:/var/www/app:cached']

  nginx:
    build: './sapi/docker/nginx'
    ports: ['80:80']
    volumes: ['./sapi/app/:/var/www/app:cached']

  database:
      container_name: 'database'
      image: 'pgvector/pgvector:pg17'
      ports:
          - '${FORWARD_DB_PORT:-5432}:5432'
      environment:
          PGPASSWORD: '${DB_PASSWORD:-secret}'
          POSTGRES_DB: '${DB_DATABASE}'
          POSTGRES_USER: '${DB_USERNAME}'
          POSTGRES_PASSWORD: '${DB_PASSWORD:-secret}'
          POSTGRES_EXTENSIONS: system_stats
      volumes:
          - 'db_data:/var/lib/postgresql/data'
          - './app/migrations/init.sql:/docker-entrypoint-initdb.d/10-create-testing-database.sql'
      healthcheck:
          test: ["CMD", "pg_isready", "-q", "-d", "${DB_DATABASE}", "-U", "${DB_USERNAME}"]
          # retries: 3
          # timeout: 5s

  rabbitmq:
    container_name: 'rabbitmq'
    image: 'rabbitmq:4.0-management'
    ports:
      - '5672:5672'
      - '15672:15672'
    healthcheck:
      test: rabbitmq-diagnostics -q ping

  register:
    container_name: 'register'
    build:
      context: .
      dockerfile: Dockerfiles/Dockerfile_register
    command: "/bin/sh -c 'pymon main.py'"
    working_dir: /register
    tty: true
    volumes:
      - './register:/register'
    depends_on:
      rabbitmq:
        condition: service_healthy

  router:
    container_name: 'router'
    build:
      context: .
      dockerfile: Dockerfiles/Dockerfile_router
    command: "/bin/sh -c 'pymon main.py'"
    working_dir: /router
    tty: true
    volumes:
      - './router:/router'
    depends_on:
      rabbitmq:
        condition: service_healthy

  model_1:
    container_name: model_1
    build:
      context: .
      dockerfile: Dockerfile_NETLOGO
    tty: true
    command: "tail -f"
    # command: "/bin/sh -c 'python3 /multiagent_models/netlogo/main.py >> /multiagent_models/netlogo/m1/m1_output.txt'"
    environment:
        - PYTHONUNBUFFERED=1
        - my_hostname=model_1
        - model_file=/multiagent_models/netlogo/m1/sugarscape_m1.nlogo
        - experiment=experiment1
        - auto_run=True
        - host=api
    volumes:
      - ./multiagent_models/netlogo:/multiagent_models/netlogo
    depends_on:
      rabbitmq:
        condition: service_healthy

  model_2:
    container_name: model_2
    build:
      context: .
      dockerfile: Dockerfile_NETLOGO
    tty: true
    command: "tail -f"
    # command: "/bin/sh -c 'python3 /multiagent_models/netlogo/main.py >> /multiagent_models/netlogo/m1/m1_output.txt'"
    environment:
        - PYTHONUNBUFFERED=1
        - my_hostname=model_2
        - model_file=/multiagent_models/netlogo/m2/sugarscape_m2.nlogo
        - experiment=experiment2
        - auto_run=True
        - host=api
    volumes:
      - ./multiagent_models/netlogo:/multiagent_models/netlogo
    depends_on:
      rabbitmq:
        condition: service_healthy

  pgadmin:
    container_name: pgadmin
    image: "dpage/pgadmin4:9.1.0"
    ports:
      - "8080:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@mail.com
      - PGADMIN_DEFAULT_PASSWORD=admin

##############################
# BELOW ALL LEGACY CONTAINERS#
##############################
#   jacamo:
#     container_name: jacamo
#     build:
#       context: .
#       dockerfile: Dockerfile_GRADLE
#     tty: true           # Container alive
#     #command: "/bin/sh -c 'gradle >> /legacy/netlogo_output/gradle_output.txt'"
#     ports:
#       - "3271:3271"
#       - "3272:3272"
#       - "3273:3273"
#     volumes:
#       - ./legacy:/legacy
#       - ./legacy/jacamo/jacamo_model:/home/gradle/project
#     environment:
#       - host=api
#     networks:
#       - my_network
#     depends_on:
#       - "model_1"
#       - "model_2"
#       - "api"
#       - "router"
#       - "clear_files"
#
#   model_1:
#     container_name: model_1
#     build:
#       context: .
#       dockerfile: Dockerfile_NETLOGO
#     tty: true           # Container alive
#     command: "/bin/sh -c 'python3 /legacy/python_execute_netlogo.py >> /legacy/netlogo_output/m1_output.txt'"
#     environment:
#         - PYTHONUNBUFFERED=1
#         - my_hostname=model_1
#         - model_file=/legacy/sugarscape_m1.nlogo
#         - experiment=experiment1
#         - auto_run=True
#         - host=api
#     volumes:
#       - ./legacy:/legacy
#     networks:
#       - my_network
#     depends_on:
#       - "router"
#       - "api"
#       - "clear_files"
#
#   model_2:
#     container_name: model_2
#     build:
#       context: .
#       dockerfile: Dockerfile_NETLOGO
#     tty: true           # Container alive
#     command: "/bin/sh -c 'python3 /legacy/python_execute_netlogo.py >> /legacy/netlogo_output/m2_output.txt'"
#     environment:
#         - PYTHONUNBUFFERED=1
#         - my_hostname=model_2
#         - model_file=/legacy/sugarscape_m2.nlogo
#         - experiment=experiment1
#         - auto_run=True
#         - host=api
#     volumes:
#         - ./legacy:/legacy
#     networks:
#         - my_network
#     depends_on:
#         - "router"
#         - "api"
#         - "clear_files"
#   api:
#     container_name: api
#     build:
#       context: .
#       dockerfile: Dockerfile_PYTHON
#     tty: true           # Container alive
#     command: "python3 /legacy/api.py"
#     environment:
#     - PYTHONUNBUFFERED=1
#     ports:
#         - "5000:5000"
#     volumes:
#       - ./legacy:/legacy
#     networks:
#       - my_network
#     depends_on:
#         db:
#             condition: service_healthy
#
#   router:
#     container_name: router
#     build:
#       context: .
#       dockerfile: Dockerfile_PYTHON
#     tty: true           # Container alive
#     command: "python3 /legacy/router.py"
#     environment:
#     - PYTHONUNBUFFERED=1
#     volumes:
#       - ./legacy:/legacy
#     networks:
#       - my_network
#     depends_on:
#         db:
#             condition: service_healthy
#
#   clear_files:
#     container_name: clear_files
#     build:
#       context: .
#       dockerfile: Dockerfile_PYTHON
#     tty: true           # Container alive
#     command: "python3 /legacy/clean_simulation_files.py"
#     environment:
#     - PYTHONUNBUFFERED=1
#     volumes:
#       - ./legacy:/legacy
#     networks:
#       - my_network
#
#   php:
#     container_name: php
#     build:
#       context: .
#       dockerfile: Dockerfile_PHP
#     tty: true           # Container alive
#     environment:
#       - output_agents=${output_agents}
#       - host=api
#     ports:
#       - "80:80"
#     volumes:
#       - ./legacy:/var/www/html
#       - ./legacy:/legacy
#     depends_on:
#           db:
#             condition: service_healthy
#     networks:
#       - my_network
#
#   db:
#     container_name: db
#     build:
#       context: .
#       dockerfile: Dockerfile_MYSQL
#     restart: always
#     environment:
#         MYSQL_ROOT_PASSWORD: root
#         MYSQL_ROOT_HOST: '%'
#         # MYSQL_DATABASE: MYSQL_DATABASE
#         # MYSQL_USER: MYSQL_USER
#         # MYSQL_PASSWORD: MYSQL_PASSWORD
#     healthcheck:
#       test:  mysql --user=root --password=root -e 'select * from MYSQL_DATABASE.m1' MYSQL_DATABASE
#     volumes:
#       - ./legacy:/legacy
#       - ./legacy/db_file:/docker-entrypoint-initdb.d
#     ports:
#         - "9906:3306"
#     networks:
#       - my_network
#     depends_on:
#       - clear_files
#
# networks:
#   my_network:
#     name: my_network
#     driver: bridge
volumes:
  db_data:
      driver: local

