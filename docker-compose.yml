services:
  api:
    container_name: 'api'
    tty: true
    build:
      context: .
      dockerfile: ./app/Dockerfile
    ports:
        - '${API_PORT}:8000'
    env_file:
        - .env
    volumes:
        - './app:/app'
        - '.env:/app/.env'
    working_dir: /app
    command: "fastapi dev main.py --host 0.0.0.0"
    depends_on:
      - 'database'

  ollama:
    image: docker.io/ollama/ollama:latest
    ports:
      - 7869:11434
    volumes:
      - .:/code
      - ./ollama/ollama:/root/.ollama
    container_name: ollama
    pull_policy: always
    tty: true
    restart: always
    environment:
      - OLLAMA_KEEP_ALIVE=24h
      - OLLAMA_HOST=0.0.0.0

  php:
    build: './sapi/docker/php'
    ports: ['9000:9000']
    volumes: ['./sapi/app/:/var/www/app:cached']

  nginx:
    build: './sapi/docker/nginx'
    ports: ['80:80']
    volumes: ['./sapi/app/:/var/www/app:cached']

  database:
      container_name: 'database'
      image: 'pgvector/pgvector:pg17'
      ports:
          - '${FORWARD_DB_PORT:-5432}:5432'
      environment:
          PGPASSWORD: '${DB_PASSWORD:-secret}'
          POSTGRES_DB: '${DB_DATABASE}'
          POSTGRES_USER: '${DB_USERNAME}'
          POSTGRES_PASSWORD: '${DB_PASSWORD:-secret}'
          POSTGRES_EXTENSIONS: system_stats
      volumes:
          - 'db_data:/var/lib/postgresql/data'
          - './app/migrations/init.sql:/docker-entrypoint-initdb.d/10-create-testing-database.sql'
      healthcheck:
          test: ["CMD", "pg_isready", "-q", "-d", "${DB_DATABASE}", "-U", "${DB_USERNAME}"]
          # retries: 3
          # timeout: 5s

  rabbitmq:
    container_name: 'rabbitmq'
    image: 'rabbitmq:4.0-management'
    ports:
      - '5672:5672'
      - '15672:15672'
    healthcheck:
      test: rabbitmq-diagnostics -q ping

  register:
    container_name: 'register'
    build:
      context: .
      dockerfile: Dockerfiles/Dockerfile_register
    environment:
      llm_register: ${LLM_REGISTER}
    command: "/bin/sh -c 'pymon main.py'"
    working_dir: /register
    tty: true
    volumes:
      - './register:/register'
    depends_on:
      rabbitmq:
        condition: service_healthy

  router:
    container_name: 'router'
    build:
      context: .
      dockerfile: Dockerfiles/Dockerfile_router
    command: "/bin/sh -c 'pymon main.py'"
    working_dir: /router
    tty: true
    volumes:
      - './router:/router'
    depends_on:
      rabbitmq:
        condition: service_healthy

  model_1:
    container_name: model_1
    build: './multiagent_models/netlogo'
    tty: true
    command: "tail -f"
    environment:
      PYTHONUNBUFFERED: 1
      model_file: "/multiagent_models/netlogo/m1/sugarscape_m1.nlogo"
      experiment: "experiment1"
      auto_run: "True"
      api_uri: ${API_URI}
      api_port: ${API_PORT}
    volumes:
      - ./multiagent_models/netlogo:/multiagent_models/netlogo
    depends_on:
      rabbitmq:
        condition: service_healthy

  model_2:
    container_name: model_2
    build:
      context: .
      dockerfile: Dockerfile_NETLOGO
    tty: true
    command: "tail -f"
    environment:
        - PYTHONUNBUFFERED=1
        - model_file=/multiagent_models/netlogo/m2/sugarscape_m2.nlogo
        - experiment=experiment2
        - auto_run=True
        - api_uri=api
        - api_port=8000
    volumes:
      - ./multiagent_models/netlogo:/multiagent_models/netlogo
    depends_on:
      rabbitmq:
        condition: service_healthy

  pgadmin:
    container_name: pgadmin
    image: "dpage/pgadmin4:9.1.0"
    ports:
      - "8080:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@mail.com
      - PGADMIN_DEFAULT_PASSWORD=admin

volumes:
  db_data:
      driver: local

